---
- service: name=docker state=started

- name: Docker Login
  docker_login:
    registry: 'gcr.io/{{ project_id }}/apiserver'
    username: _json_key
    debug: true
    password: '{{ docker_password }}'

- name: Build apiserver and push it to a private repo
  docker_image:
    build:
      path: ../
      dockerfile: Dockerfile-apiserver
    name: 'gcr.io/{{ project_id }}/apiserver'
    tag: latest
    push: yes
    force: yes
    source: build
    state: present

- name: Deploy cloud run apiserver
  command: gcloud run deploy apiserver --project '{{ project_id }}' --image gcr.io/{{ project_id }}/apiserver:latest --platform managed --region '{{ location }}' --allow-unauthenticated --add-cloudsql-instances '{{ sql_instance_res.connectionName }}' --set-env-vars DB_INSTANCE_CONNECTION_NAME='{{ sql_instance_res.connectionName }}' --set-env-vars SLOW_STORAGE_TYPE=gcs --set-env-vars GCS_BUCKET='{{ storage_instance_name }}' --set-env-vars D16B_XSD_PATH=xml/d16b/xsd --set-env-vars UBL21_XSD_PATH=xml/ubl21/xsd --set-env-vars DB_USER='{{ sql_instance.db_user }}' --set-env-vars DB_PASSWORD='{{ sql_instance.db_password }}' --set-env-vars DB_NAME='{{ sql_instance.db_name }}'

- name: Deploy cloud get service apiserver
  shell: gcloud run services describe apiserver --project '{{ project_id }}' --platform managed --region '{{ location }}' --format 'value(status.url)'
  register: apiserver_output

- set_fact: apiserver_url="{{ apiserver_output.stdout}}"

- debug:
    msg: apiserver_url={{ apiserver_url }}
