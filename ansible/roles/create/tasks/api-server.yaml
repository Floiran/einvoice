---
- service: name=docker state=started

- name: Docker Login
  docker_login:
    registry: 'gcr.io/{{ project_id }}/apiserver'
    username: _json_key
    debug: true
    password: '{{ docker_password }}'

- name: Build apiserver and push it to a private repo
  docker_image:
    build:
      path: ../
      dockerfile: Dockerfile-apiserver
    name: 'gcr.io/{{ project_id }}/apiserver'
    tag: latest
    push: yes
    force: yes
    source: build
    state: present

- name: Deploy cloud run apiserver
  command: >
    gcloud run deploy apiserver
      --project '{{ project_id }}'
      --image gcr.io/{{ project_id }}/apiserver:latest
      --platform managed
      --region '{{ location }}'
      --allow-unauthenticated
      --vpc-connector sql-apiserver-connector
      --add-cloudsql-instances '{{ sql_apiserver_instance_res.connectionName }}'
      --set-env-vars GCS_BUCKET='{{ storage_instance_name }}'
      --set-env-vars DB_USER='{{ apiserver_sql.db_user }}'
      --set-env-vars DB_HOST={{sql_apiserver_instance_res.ipAddresses[0].ipAddress}}
      --set-env-vars DB_PASSWORD='{{ apiserver_sql.db_password }}'
      --set-env-vars DB_NAME='{{ apiserver_sql.db_name }}'
      --set-env-vars APISERVER_ENV=prod

- name: Deploy cloud get service apiserver
  command: >
    gcloud run services describe apiserver
      --project '{{ project_id }}'
      --platform managed
      --region '{{ location }}'
      --format 'value(status.url)'
  register: apiserver_output

- set_fact: apiserver_url="{{ apiserver_output.stdout}}"

- debug:
    msg: apiserver_url={{ apiserver_url }}
