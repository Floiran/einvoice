# export GCP_AUTH_KIND=serviceaccount
# export GCP_SERVICE_ACCOUNT_FILE=/home/filip/webserver1-283520-386230d8738c.json
# export GCP_SCOPES=https://www.googleapis.com/auth/compute,https://www.googleapis.com/auth/cloud-platform
# ansible-playbook cluster.yaml
---
- hosts: localhost
  vars:
    location: us-west1
    storage_instance:
      name: webserverstorage1
    project_id: webserver1-283520
    sql_instance:
      name: webserverdb5
      backend_type: SECOND_GEN
      database_version: POSTGRES_12
      region: us-west1
      tier: db-g1-small
    cluster_name: my-cluster1
  tasks:
# kubernetes cluster
    - name: create a cluster
      gcp_container_cluster:
        name: '{{ cluster_name }}'
        initial_node_count: 2
        master_auth:
          username: cluster_admin
          password: my-secret-password
        location: '{{ location }}'
        project: webserver1-283520
        state: present
      register: cluster
    - name: setup kubect
      command: gcloud container clusters get-credentials '{{ cluster_name }}' --region us-west1 --project '{{ project_id }}'
    - name: create a node pool
      gcp_container_node_pool:
        name: my-pool
        initial_node_count: 1
        cluster: "{{ cluster }}"
        location: '{{ location }}'
        project: '{{ project_id }}'
        config:
          oauth_scopes: [
            'https://www.googleapis.com/auth/devstorage.read_only',
            'https://www.googleapis.com/auth/sqlservice.admin'
          ]
          machine_type: n1-standard-4
          disk_size_gb: 500
        state: present
        autoscaling:
          enabled: no
# bucket
    - name: create a bucket
      gcp_storage_bucket:
        name: '{{ storage_instance.name }}'
        project: '{{ project_id }}'
        state: present
# sql database
    - name: Create GCP CloudSQL instance
      gcp_sql_instance:
        name: '{{ sql_instance.name }}'
        backend_type: '{{ sql_instance.backend_type }}'
        database_version: '{{ sql_instance.database_version }}'
        settings:
          tier: '{{ sql_instance.tier }}'
          ip_configuration:
            authorized_networks:
              - name: google dns server
                value: 8.8.8.8/32
        region: '{{ sql_instance.region }}'
        project: '{{ project_id }}'
        state: present
      register: instance
    - debug:
        msg: '{{ instance }}'
    - name: Create database
      ignore_errors: yes
      gcp_sql_database:
        name: einvoice
        charset: utf8
        instance: "{{ instance.name }}"
        project: '{{ project_id }}'
        state: present
    - name: create a user
      ignore_errors: yes
      gcp_sql_user:
        name: einvoice
        host: '{{ instance.ipAddresses[0].ipAddress }}'
        password: 12345
        instance: "{{ instance }}"
        project: '{{ project_id }}'
        state: present
# api server
    - service: name=docker state=started
    - name: Docker Login
      docker_login:
        registry: gcr.io/webserver1-283520/apiserver
        username: _json_key
        debug: true
        password: " {{ lookup('file', '/home/filip/mfsr/webserver1-283520-386230d8738c.json')}}"
    - name: Build an image and push it to a private repo
      docker_image:
        build:
          path: ../
          dockerfile: Dockerfile-apiserver
        name: gcr.io/webserver1-283520/apiserver
        tag: latest
        push: yes
        force: yes
        source: build
        state: present
    - name: create apiserver deployment
      k8s:
        state: present
        name: develop
        api_version: v1
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: apiserver
            name: apiserver
            namespace: default
          spec:
            replicas: 1
            strategy:
              type: Recreate
            selector:
              matchLabels:
                app: apiserver
            template:
              metadata:
                labels:
                  app: apiserver
              spec:
                enableServiceLinks: false
                restartPolicy: Always
                containers:
                  - name: apiserver
                    image: gcr.io/webserver1-283520/apiserver:latest
                    imagePullPolicy: Always
                    env:
                      - name: SLOW_STORAGE_TYPE
                        value: local
                      - name: LOCAL_STORAGE_BASE_PATH
                        value: /tmp/einvoice
                      - name: DB_HOST
                       # value: '{{ instance.connectionName }}'
                        value: 127.0.0.1
                      - name: DB_PORT
                        value: "5432"
                      - name: DB_USER
                        value: einvoice
                      - name: DB_PASSWORD
                        value: "12345"
                      - name: DB_NAME
                        value: einvoice
                  - name: cloud-sql-proxy
                    image: gcr.io/cloudsql-docker/gce-proxy:1.17
                    command:
                      - "/cloud_sql_proxy"
                      - '-instances={{instance.connectionName}}=tcp:5432'
                    securityContext:
                      runAsNonRoot: true
    - name: create apiserver service
      k8s:
        state: present
        name: develop
        api_version: v1
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            labels:
              app: apiserver
            name: apiserver
            namespace: default
          spec:
            ports:
              - name: "apiserver-http"
                port: 80
                targetPort: 8000
            selector:
              app: apiserver